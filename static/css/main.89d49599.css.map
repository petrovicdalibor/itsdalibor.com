{"version":3,"file":"static/css/main.89d49599.css","mappings":"2FAAA,KAKE,kCAAmC,CACnC,iCAAkC,CAJlC,mIAEY,CAHZ,QAMF,CAEA,KACE,uEAEF,CCZQ,QCGN,eACA,CAFA,YACA,CDHM,cCCN,WACA,CAEA,YACA,yBCyGA,QD9GF,WAOI,kBAME,UEZE,CFSJ,gBACE,gBACA,CEXE,iBFcF,CAHA,oBACA,CAEA,aACA,OGdJ,sBADA,YACA,CADA,+BDDM,YCIN,qBACE,uBACA,eAKE,UDXE,CCOJ,cACE,CACA,eACA,CAFA,kBACA,CDTE,0BCUF,UAGA,yBFiGJ,cEvGE,gBAQI,iBACA,0BF8FN,cE3FM,gBACA,oBAbJ,eAcI,sBAGA,WACA,CAFF,iBACE,CAEA,gBADA,iBAEA,kCACA,YACE,yBFiFR,iCElFM,aAGI,0BF+EV,iCElFM,aAMI,0BF4EV,oBEvFI,WAeI,0BFwER,oBEvFI,WAkBI,2BAEF,iBACE,4BACA,oBACE,CACA,SADA,SAEA,yBF8DV,6BE3DU,YACE,qCAGJ,cACE,gBAMV,gBACE,kBACA,UD/DI,qBCiEF,UACA,wBAOE,WACA,CAHA,aACA,CAFA,WACA,CAGA,oBACA,CAPA,cACA,CAGA,aACA,CAJA,iBACA,CAKA,uCARF,SASE,8BAEF,aD7EG,iBC+ED,WDjFA,wBHUN,CAGA,kCAGA,mCARA,eGRM,CHYN,gJACA,CAHA,QACA,CGXM,wBHUN,CACA,SACA,CALA,wBACA,CADA,oBACA,CADA,gBACA,CAHF,iBAYE,YAMA,YADA,aACA,CAFA,gBACA,CAFF,YAIE,0BEsFA,WFpFE,iBANJ,YAOI,2BEmFF,WFhFE,gBAVJ,WAWI,2BE+EF,WF5EE,eAdJ,UAeI,kBAEF,YACE,YACA,eACA,yBEsEF,gBFzEA,cAKI,uBAGJ,kBACE,2BAEF,6BACE,mBAEF,mBACE,kBAKF,YADF,UAEE,uBACA,YACE,YACA,UAMF,qBGlEM,CHoEN,YAJF,iBACE,CGjEM,UHoEN,CAHA,SAIA","sources":["index.css","styles/global.scss","styles/components/header.scss","styles/breakpoints.scss","styles/variables.scss","styles/components/banner.scss"],"sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import\"https://fonts.googleapis.com/css?family=Josefin+Sans:400,600,700&display=swap\";.header{position:fixed;width:100%;height:128px;font-weight:600;z-index:9999}@media(max-width: 425px){.header{height:96px}}.header .logo a{font-size:1.6rem;font-weight:700;text-decoration:none;color:#000;position:relative;z-index:10000}.main{height:100vh;height:calc(var(--vh, 1vh)*100);background-color:#fff}.main .row{flex-direction:column;justify-content:center}.main .row h2{font-size:3rem;line-height:4.2rem;font-weight:700;z-index:10;color:#fff;mix-blend-mode:difference}@media(max-width: 768px){.main .row h2{font-size:2.4rem;line-height:3rem}}@media(max-width: 425px){.main .row h2{margin-top:70px;font-size:1.8rem;line-height:2.2rem}}.main .row h2 .line{margin-bottom:8px;height:58px;position:relative;overflow:hidden}.main .row h2 .line:nth-child(3){display:none}@media(max-width: 620px){.main .row h2 .line:nth-child(3){display:block}}@media(max-width: 425px){.main .row h2 .line:nth-child(3){display:block}}@media(max-width: 768px){.main .row h2 .line{height:48px}}@media(max-width: 425px){.main .row h2 .line{height:32px}}.main .row h2 .line span{position:absolute}.main .row h2 .line span p{display:inline-block;padding:0;margin:0}@media(max-width: 620px){.main .row h2 .line span .nl{display:none}}.main .row h2 .line span .colorful{display:inline}.main .btn-row{font-size:1.2rem}.main .btn-row a{color:#000;text-decoration:none;z-index:1}.main .btn-row a:after{z-index:0;font-size:40px;position:relative;content:\"â†’\";color:#bababa;margin-left:0px;bottom:-7px;display:inline-block;-webkit-transition:all .2s ease-in-out}.main .btn-row a:hover:after{color:#c70039;margin-left:10px}body,html{visibility:hidden;user-select:none;background:#fff;overscroll-behavior:none;margin:0;padding:0;font-family:\"Josefin Sans\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.container{width:1050px;min-width:1050px;margin:0 auto;height:100%}@media(max-width: 1560px){.container{width:1050px;min-width:1050px}}@media(max-width: 1366px){.container{width:980px;min-width:980px}}@media(max-width: 1080px){.container{width:100%;min-width:100%}}.container .row{display:flex;height:100%;padding:0 32px}@media(max-width: 425px){.container .row{padding:0 16px}}.container .v-center{align-items:center}.container .space-between{justify-content:space-between}.container .right{justify-content:end}.container-fluid{width:100%;height:100%}.container-fluid .row{display:flex;height:100%}.overlay{position:absolute;z-index:9;background-color:#000;width:100%;height:100%}",".header {\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 128px;\r\n  font-weight: 600;\r\n  z-index: 9999;\r\n  @include media(\"<=phone\") {\r\n    height: 96px;\r\n  }\r\n  .logo {\r\n    a {\r\n      font-size: 1.6rem;\r\n      font-weight: 700;\r\n      text-decoration: none;\r\n      color: $black;\r\n      position: relative;\r\n      z-index: 10000;\r\n    }\r\n  }\r\n}\r\n","$breakpoints: (\r\n  \"phone\": 425px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1366px,\r\n  \"LGdesktop\": 1920px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///\t\t'retina2x': (\r\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n///\t\t\t'(min-resolution: 192dpi)'\r\n///\t\t)\r\n///\t);\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"retina2x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 2)\",\r\n    \"(min-resolution: 192dpi)\",\r\n  ),\r\n  \"retina3x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 3)\",\r\n    \"(min-resolution: 350dpi)\",\r\n  ),\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media(\">128px\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media(\">20em\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media(\">2.0rem\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1,\r\n) !default;\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media(\">phone\") { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media(\">phone\", \"<=tablet\") { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media(\">=358px\", \"<850px\") { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media(\">desktop\", \"<=1350px\") { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media(\"retina2x\") { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n///\r\n@mixin media($conditions...) {\r\n  @for $i from 1 through length($conditions) {\r\n    $conditions: set-nth(\r\n      $conditions,\r\n      $i,\r\n      parse-expression(nth($conditions, $i))\r\n    );\r\n  }\r\n\r\n  $branches: get-query-branches($conditions);\r\n  $query: \"\";\r\n\r\n  @each $branch in $branches {\r\n    @if (str-length($query) != 0) {\r\n      $query: $query + \", \";\r\n    }\r\n\r\n    $query: $query + $branch;\r\n  }\r\n\r\n  @media #{$query} {\r\n    @content;\r\n  }\r\n}\r\n\r\n///\r\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $expressions  - list of expressions\r\n///\r\n/// @throws `$expression` is not a valid expression\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function get-query-branches($expressions) {\r\n  $result: \"\";\r\n  $has-groups: false;\r\n\r\n  // Getting initial snapshot and looking for groups\r\n  @each $expression in $expressions {\r\n    @if (str-length($result) != 0) {\r\n      $result: $result + \" and \";\r\n    }\r\n\r\n    @if (type-of($expression) == \"string\") {\r\n      $result: $result + $expression;\r\n    } @else if (type-of($expression) == \"list\") {\r\n      $result: $result + nth($expression, 1);\r\n      $has-groups: true;\r\n    } @else {\r\n      @warn '#{$expression} is not a valid expression.';\r\n    }\r\n  }\r\n\r\n  // If we have groups, we have to create all possible combinations\r\n  @if $has-groups {\r\n    @each $expression in $expressions {\r\n      @if (type-of($expression) == \"list\") {\r\n        $first: nth($expression, 1);\r\n\r\n        @each $member in $expression {\r\n          @if ($member != $first) {\r\n            @each $partial in $result {\r\n              $result: join(\r\n                $result,\r\n                str-replace-first($first, $member, $partial)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Parses a string to form a media query expression\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $expression  - expression (in string)\r\n///\r\n/// @throws Expression with type `type-of($expression)` detected, string expected\r\n/// @throws `$expression` is missing an operator\r\n/// @throws Unknown unit: `$unit`\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function parse-expression($expression) {\r\n  $operator: \"\";\r\n  $value: \"\";\r\n  $element: \"\";\r\n  $result: \"\";\r\n  $is-width: true;\r\n\r\n  @if (type-of($expression) != \"string\") {\r\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n  }\r\n\r\n  // Separating the operator from the rest of the expression\r\n  @if (str-slice($expression, 2, 2) == \"=\") {\r\n    $operator: str-slice($expression, 1, 2);\r\n    $value: str-slice($expression, 3);\r\n  } @else {\r\n    $operator: str-slice($expression, 1, 1);\r\n    $value: str-slice($expression, 2);\r\n  }\r\n\r\n  // Checking what type of expression we're dealing with\r\n  @if map-has-key($breakpoints, $value) {\r\n    $result: map-get($breakpoints, $value);\r\n  } @else if map-has-key($media-expressions, $expression) {\r\n    $result: map-get($media-expressions, $expression);\r\n    $is-width: false;\r\n  } @else {\r\n    $result: to-number($value);\r\n  }\r\n\r\n  @if ($is-width) {\r\n    $unit: unit($result);\r\n    $interval: 0;\r\n\r\n    @if (map-has-key($unit-intervals, $unit)) {\r\n      $interval: map-get($unit-intervals, $unit);\r\n    } @else {\r\n      @warn 'Unknown unit: #{$unit}';\r\n    }\r\n\r\n    @if ($operator == \">\") {\r\n      $element: \"(min-width: #{$result + $interval})\";\r\n    } @else if ($operator == \"<\") {\r\n      $element: \"(max-width: #{$result - $interval})\";\r\n    } @else if ($operator == \">=\") {\r\n      $element: \"(min-width: #{$result})\";\r\n    } @else if ($operator == \"<=\") {\r\n      $element: \"(max-width: #{$result})\";\r\n    } @else {\r\n      @warn '#{$expression} is missing an operator.';\r\n    }\r\n  } @else {\r\n    $element: $result;\r\n  }\r\n\r\n  @return $element;\r\n}\r\n\r\n///\r\n/// Replaces the first occurence of the string with the replacement string\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $search  - The value being searched for\r\n/// @param {String}   $replace  - The replacement string\r\n/// @param {String}   $subject  - The string being replaced on\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function str-replace-first($search, $replace, $subject) {\r\n  $search-start: str-index($subject, $search);\r\n\r\n  @if $search-start == null {\r\n    @return $subject;\r\n  }\r\n\r\n  $result: str-slice($subject, 0, $search-start - 1);\r\n  $result: $result + $replace;\r\n  $result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Casts a number to a string\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {String}   $string  - Number to be parsed\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function to-number($string) {\r\n  // Matrices\r\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n\r\n  // Result\r\n  $result: 0;\r\n  $divider: 0;\r\n  $minus: false;\r\n\r\n  // Looping through all characters\r\n  @for $i from 1 through str-length($string) {\r\n    $character: str-slice($string, $i, $i);\r\n    $index: index($strings, $character);\r\n\r\n    @if $character == \"-\" {\r\n      $minus: true;\r\n    } @else if $character == \".\" {\r\n      $divider: 1;\r\n    } @else {\r\n      @if type-of($index) != \"number\" {\r\n        $result: if($minus, $result * -1, $result);\r\n        @return _length($result, str-slice($string, $i));\r\n      }\r\n\r\n      $number: nth($numbers, $index);\r\n\r\n      @if $divider == 0 {\r\n        $result: $result * 10;\r\n      } @else {\r\n        // Move the decimal dot to the left\r\n        $divider: $divider * 10;\r\n        $number: $number / $divider;\r\n      }\r\n\r\n      $result: $result + $number;\r\n    }\r\n  }\r\n\r\n  @return if($minus, $result * -1, $result);\r\n}\r\n\r\n@function _length($number, $unit) {\r\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n    \"vh\" \"vmin\" \"vmax\";\r\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n  $index: index($strings, $unit);\r\n\r\n  @if type-of($index) != \"number\" {\r\n    @warn 'Unknown unit `#{$unit}`.';\r\n    @return false;\r\n  }\r\n\r\n  @return $number * nth($units, $index);\r\n}\r\n","$white: #fff;\r\n$black: #000;\r\n$cherry: #c70039;\r\n",".main {\r\n  height: 100vh;\r\n  height: calc(var(--vh, 1vh) * 100);\r\n  background-color: $white;\r\n  .row {\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    h2 {\r\n      font-size: 3rem;\r\n      line-height: 4.2rem;\r\n      font-weight: 700;\r\n      z-index: 10;\r\n      color: $white;\r\n      mix-blend-mode: difference;\r\n      @include media(\"<=tablet\") {\r\n        font-size: 2.4rem;\r\n        line-height: 3rem;\r\n      }\r\n      @include media(\"<=phone\") {\r\n        margin-top: 70px;\r\n        font-size: 1.8rem;\r\n        line-height: 2.2rem;\r\n      }\r\n      .line {\r\n        margin-bottom: 8px;\r\n        height: 58px;\r\n        position: relative;\r\n        overflow: hidden;\r\n        &:nth-child(3) {\r\n          display: none;\r\n          @include media(\"<=620px\") {\r\n            display: block;\r\n          }\r\n          @include media(\"<=phone\") {\r\n            display: block;\r\n          }\r\n        }\r\n        @include media(\"<=tablet\") {\r\n          height: 48px;\r\n        }\r\n        @include media(\"<=phone\") {\r\n          height: 32px;\r\n        }\r\n        span {\r\n          position: absolute;\r\n          p {\r\n            display: inline-block;\r\n            padding: 0;\r\n            margin: 0;\r\n          }\r\n          @include media(\"<=620px\") {\r\n            .nl {\r\n              display: none;\r\n            }\r\n          }\r\n          .colorful {\r\n            display: inline;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .btn-row {\r\n    font-size: 1.2rem;\r\n    a {\r\n      color: $black;\r\n      text-decoration: none;\r\n      z-index: 1;\r\n      &:after {\r\n        z-index: 0;\r\n        font-size: 40px;\r\n        position: relative;\r\n        content: \"\\2192\";\r\n        color: #bababa;\r\n        margin-left: 0px;\r\n        bottom: -7px;\r\n        display: inline-block;\r\n        -webkit-transition: all 0.2s ease-in-out;\r\n      }\r\n      &:hover:after {\r\n        color: $cherry;\r\n        margin-left: 10px;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}